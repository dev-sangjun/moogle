{"version":3,"sources":["components/Logo.js","utils/calc.js","utils/ui.js","components/SearchBar.js","components/MovieCard.js","routes/Home.js","global/GlobalStyle.js","App.js","serviceWorker.js","apollo/index.js","index.js"],"names":["styled","props","className","getYear","date","Date","getFullYear","white","getRatingColor","rating","bg","text","SEARCH_MOVIES","gql","TextField","input","attrs","type","placeholder","Suggestions","ul","onSuggestionClick","useState","keyword","setKeyword","showSuggestions","setShowSuggestions","textField","useRef","onClick","e","index","Number","target","dataset","data","movies","useQuery","variables","error","loading","useEffect","document","addEventListener","classList","contains","isEmpty","current","console","log","message","onChange","value","ref","size","color","map","movie","key","id","data-index","title","release_date","overview","poster_path","src","alt","draggable","setMovie","onSubmit","preventDefault","SearchBar","GlobalStyle","createGlobalStyle","App","exact","path","component","Home","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.43cec3ad.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Logo = props => {\n  const { className } = props;\n\n  return <h1 className={`${className} logo`}>Moogle</h1>;\n};\n\nexport default styled(Logo)`\n  font-family: \"Noto Serif KR\", serif;\n  font-weight: lighter;\n  font-size: 3em;\n  text-align: center;\n  user-select: none;\n`;\n","export const getYear = date => new Date(date).getFullYear();\n","const white = \"#ffffff\";\nconst poor = \"#ff6529\";\nconst bad = \"#ff9f29\";\nconst doNotRecommended = \"#ffd129\";\nconst prettyGood = \"#4d96f0\";\nconst perfect = \"#6bc7a2\";\n\nexport const getRatingColor = rating => {\n  let bg,\n    text = \"\";\n  if (rating <= 3) {\n    bg = poor;\n    text = white;\n  } else if (rating <= 5) {\n    bg = bad;\n    text = white;\n  } else if (rating <= 6) {\n    bg = doNotRecommended;\n    text = white;\n  } else if (rating <= 8) {\n    bg = prettyGood;\n    text = white;\n  } else if (rating <= 10) {\n    bg = perfect;\n    text = white;\n  }\n  return {\n    bg,\n    text,\n  };\n};\n","import React, { useState, useRef, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport isEmpty from \"is-empty\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { getYear } from \"../utils\";\n\nconst SEARCH_MOVIES = gql`\n  query searchMovie($keyword: String!) {\n    movies(keyword: $keyword) {\n      id\n      title\n      overview\n      rating\n      release_date\n      poster_path\n    }\n  }\n`;\n\nconst SearchBar = props => {\n  const { className, onSuggestionClick } = props;\n  const [keyword, setKeyword] = useState(\"\");\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const textField = useRef();\n  const onChange = e => {\n    setKeyword(e.target.value);\n    setShowSuggestions(true);\n  };\n  const onClick = e => {\n    const index = Number(e.target.dataset.index);\n    onSuggestionClick(data.movies[index]);\n    setShowSuggestions(false);\n  };\n  const { error, loading, data } = useQuery(SEARCH_MOVIES, {\n    variables: {\n      keyword,\n    },\n  });\n  const renderSuggestion = () =>\n    data.movies.map((movie, index) => (\n      <li\n        className=\"suggestion\"\n        key={movie.id}\n        onClick={onClick}\n        data-index={index}\n      >\n        <span className=\"suggestion-title\">{movie.title}</span>\n        <span className=\"suggestion-release-date\">\n          {getYear(movie.release_date)}\n        </span>\n      </li>\n    ));\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", e => {\n      if (\n        !e.target.classList.contains(\"suggestion\") &&\n        !isEmpty(keyword) &&\n        e.target !== textField.current\n      )\n        setShowSuggestions(false);\n    });\n  });\n  if (error) console.log(error.message);\n  return (\n    <div className={className}>\n      <TextField onChange={onChange} value={keyword} ref={textField} />\n      {!isEmpty(keyword) && loading && (\n        <div className=\"spinner-container\">\n          <ClipLoader className=\"spinner\" size=\"20\" color=\"white\" />\n        </div>\n      )}\n      <Suggestions>{showSuggestions && data && renderSuggestion()}</Suggestions>\n    </div>\n  );\n};\n\nconst TextField = styled.input.attrs(() => ({\n  type: \"text\",\n  placeholder: \"Search...\",\n}))`\n  width: 100%;\n  background-color: rgba(80, 80, 80, 1);\n  font-size: 1em;\n  color: white;\n  height: 2rem;\n  border: none;\n  padding: 0 0.5rem;\n  &:focus {\n    outline: none;\n  }\n  &::placeholder {\n    color: rgba(200, 200, 200, 1);\n  }\n`;\n\nconst Suggestions = styled.ul`\n  list-style: none;\n  width: 100%;\n  background-color: rgba(80, 80, 80, 1);\n  user-select: none;\n  max-height: 20rem;\n  overflow: scroll;\n  opacity: 0.8;\n  .suggestion {\n    display: flex;\n    justify-content: space-between;\n    padding: 0.5rem;\n    &:hover {\n      background-color: rgba(120, 120, 120, 1);\n    }\n  }\n`;\n\nexport default styled(SearchBar)`\n  position: relative;\n  background-color: transparent;\n  border-radius: 0.25rem;\n  color: white;\n  .spinner-container {\n    width: 1.25rem;\n    height: 1.25rem;\n    position: absolute;\n    top: 0;\n    right: 0.375rem;\n    transform: translateY(0.375rem);\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { getYear, getRatingColor } from \"../utils\";\nconst MovieCard = props => {\n  const { className, movie } = props;\n  const { title, overview, rating, release_date, poster_path } = movie;\n  return (\n    <div className={className}>\n      <div className=\"img-container\">\n        <img src={poster_path} alt={`${title}`} draggable=\"false\" />\n      </div>\n      <span className=\"rating\">{rating}</span>\n      <div className=\"movie-info\">\n        <div className=\"title-date-container\">\n          <span className=\"movie-title\">{title}</span>\n          <span className=\"release-date\">{getYear(release_date)}</span>\n        </div>\n        <p className=\"overview\">{overview}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default styled(MovieCard)`\n  position: relative;\n  width: 300px;\n  height: 500px;\n  box-shadow: 0 0 1rem 0 rgba(0, 0, 0, 0.2);\n  border-radius: 0.5rem;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  user-select: none;\n  .img-container {\n    position: relative;\n    height: 70%;\n    overflow: hidden;\n    transform: skewY(-10deg) translateY(-3.5rem);\n    box-shadow: 0 0 1rem 0 rgba(0, 0, 0, 0.2);\n    img {\n      height: 20rem;\n      object-fit: cover;\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      z-index: 1;\n    }\n  }\n  .rating {\n    display: block;\n    position: absolute;\n    top: 60%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: ${props => getRatingColor(props.movie.rating).bg};\n    color: ${props => getRatingColor(props.movie.rating).text};\n    font-weight: bold;\n    text-align: center;\n    line-height: 4rem;\n    width: 4rem;\n    height: 4rem;\n    font-size: 1.2em;\n    border-radius: 50%;\n    box-shadow: 0 0 1rem 0 rgba(0, 0, 0, 0.2);\n  }\n  .movie-info {\n    position: relative;\n    z-index: 2;\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    padding: 1rem;\n    .title-date-container {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 0.5rem;\n      .movie-title {\n        flex: 1;\n        font-size: 1.5em;\n        font-weight: bold;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n      .release-date {\n        font-size: 1.2em;\n        width: 3rem;\n        text-align: center;\n      }\n    }\n    .overview {\n      position: relative;\n      height: 4.8em;\n      line-height: 1.2em;\n      font-size: 1em;\n      word-wrap: break-word;\n      overflow: hidden;\n      &:after {\n        content: \"\";\n        text-align: right;\n        position: absolute;\n        bottom: 0;\n        right: 0;\n        width: 50%;\n        height: 1.2em;\n        background: linear-gradient(\n          to right,\n          rgba(255, 255, 255, 0),\n          rgba(255, 255, 255, 1) 50%\n        );\n      }\n    }\n  }\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { SearchBar, MovieCard } from \"../components\";\n\nconst Home = props => {\n  const { className } = props;\n  const [movie, setMovie] = useState();\n  const onSuggestionClick = data => {\n    setMovie(data);\n  };\n  return (\n    <div className={className}>\n      <form className=\"search-form\" onSubmit={e => e.preventDefault()}>\n        <SearchBar onSuggestionClick={onSuggestionClick} />\n      </form>\n      <div className=\"search-result\">\n        {movie && <MovieCard movie={movie} />}\n      </div>\n    </div>\n  );\n};\n\nexport default styled(Home)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 2rem;\n  .search-form {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    ${SearchBar} {\n      width: 70%;\n      position: absolute;\n      z-index: 2;\n    }\n  }\n  .search-result {\n    position: relative;\n    top: 4rem;\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n  }\n  .logo {\n    margin-top: 2rem;\n  }\n`;\n\nexport default GlobalStyle;\n","import React from \"react\";\nimport \"./css/App.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Home } from \"./routes\";\nimport { Logo } from \"./components\";\nimport { GlobalStyle } from \"./global\";\nfunction App() {\n  return (\n    <Router className=\"App\">\n      <Logo />\n      <Route exact path=\"/\" component={Home} />\n      <GlobalStyle />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ApolloClient from \"apollo-boost\";\n\nconst client = new ApolloClient({\n  uri: \"https://movie-api-graphql.herokuapp.com\",\n});\n\nexport default client;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport client from \"./apollo\";\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}